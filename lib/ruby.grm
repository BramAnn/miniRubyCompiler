%{
void yyerror (const char *s);
int yylex();

#include <stdio.h>     /* C declarations used in actions */
#include <stdlib.h>
#include <ctype.h>
#include "../base.h"
#include "../lib/enumTokens.h"

#include "../expressions/expression.h"
#include "../expressions/idExpr.h"
#include "../expressions/binopExpr.h"
#include "../expressions/binopComExpr.h"
#include "../expressions/valueExpr.h"
#include "../expressions/literalExpr.h"
#include "../expressions/assignExpr.h"
#include "../expressions/idPassthroughExpr.h"
#include "../expressions/unaryopExpr.h"

#include "../expressions/expressionList.h"

#include "../statements/statement.h"
#include "../statements/compoundStmt.h"
#include "../statements/undefStmt.h"
#include "../statements/defStmt.h"
#include "../statements/returnStmt.h"
#include "../statements/expressionStmt.h"
#include "../statements/emptyStmt.h"
#include "../statements/printStmt.h"
#include "../statements/ifStmt.h"
#include "../statements/unlessStmt.h"
#include "../statements/whileStmt.h"
#include "../statements/untilStmt.h"

// typedef Struct Stm {} Stm;
// typedef Struct Exp {} Exp;
// typedef Struct ExpList {} ExpList;

//Stm thesyntree;

class UnaryopExpr;
class Base;
class Statement;
const Statement *root = nullptr;
%}
// vul aan met tokendeclaraties

%union {
	int32_t num;
	char* id;
	bool boolean;

	Statement *stmt;
	Expression *expr;
	IdExpr *idExpr;
	ExpressionList *exprList;
	}

%start program

%token
//SEMICOLON UNDEF DEF LPAREN RPAREN END RETURN INTEGER IDENTIFIER IF THEN ELSIF ELSE UNLESS WHILE DO
//UNTIL CASE WHEN COMMA ASSIGN PLUSASSIGN MINUSASSIGN MULASSIGN DIVASSIGN ANDASSIGN ORASSIGN PLUS MINUS MUL DIV
//GT GE LT LE EQ NE AND OR NOT BOOLEAN NEWLINE
SEMICOLON UNDEF DEF LPAREN RPAREN END RETURN IF THEN ELSIF ELSE UNLESS WHILE DO
UNTIL CASE WHEN COMMA ASSIGN PLUSASSIGN MINUSASSIGN MULASSIGN DIVASSIGN ANDASSIGN ORASSIGN PLUS MINUS MUL DIV
GT GE LT LE EQ NE AND OR NOT BOOLEAN NEWLINE IDENTIFIER INTEGER PRINT

%type <stmt> program compstmt multiplestmt singlestmt multipleelseif singleelse stmt t
%type <idExpr> identifier
%type <expr> expr literal
%type <exprList> multipleexpr singlearglist

%type <id> IDENTIFIER
%type <num> INTEGER
%type <boolean> BOOLEAN




// %type <stm> stm
// %type <exp> exp
// %type <explist> explist

// vul aan met voorrangdeclaraties
%nonassoc ASSIGN PLUSASSIGN MINUSASSIGN MULASSIGN DIVASSIGN ANDASSIGN ORASSIGN
%nonassoc GT GE LT LE EQ NE AND OR
%left PLUS MINUS MUL DIV
%right UMINUS NOT

%locations

%%

// vul aan met producties
program : compstmt                      	{printf("program : compstmt \n");
                                            $$ = $1; root = $$;}
	;

compstmt : stmt multiplestmt singlestmt 	{printf("compstmt : stmt multiplestmt singlestmt \n");
						                    $$ = new CompoundStmt($1, $2) ;}
	;

multiplestmt:			                    {printf("multiplestmt:  empty\n");
						                    $$ = new EmptyStmt();}
	| multiplestmt t stmt                   {printf("multiplestmt:  multiplestmt t stmt\n");
						                    $$ = new CompoundStmt($1, $3) ; }
	;

singlestmt:                                 {printf("singlestmt:  \n");
						                    $$ = new EmptyStmt();}
	| t                                     {printf("singlestmt:  \n");
						                    $$ = new EmptyStmt();}
	;

stmt: 	  PRINT LPAREN expr RPAREN						            {printf("stmt: PRINT LPAREN expr RPAREN \n");
    $$ = new PrintStmt($3);}
	| UNDEF identifier							                    {printf("stmt: UNDEF identifier \n"); $$ = new UndefStmt($2); }
	| DEF identifier LPAREN singlearglist RPAREN compstmt END		{printf("stmt: DEF identifier LPAREN singlearglist RPAREN compstmt END \n");
										                            $$ = new DefStmt($2, $4, $6);}
	| RETURN expr								                    {printf("stmt: RETURN expr \n"); $$ = new ReturnStmt($2); }
	| IF expr then compstmt multipleelseif		                    {printf("stmt: IF expr then compstmt multipleelsif singleelse END \n");
                                                                    $$ = new IfStmt($2, $4, $5);}
	| UNLESS expr then compstmt singleelse END				        {printf("stmt: UNLESS expr then compstmt singleelse END \n");
                                                                    $$ = new UnlessStmt($2,$4,$5);}
	| WHILE expr do compstmt END						            {printf("stmt: WHILE expr do compstmt END \n");
                                                                    $$ = new WhileStmt($2,$4); }
	| UNTIL expr do compstmt END						            {printf("stmt: UNTIL expr do compstmt END \n");
                                                                    $$ = new UntilStmt($2,$4);}
	| CASE expr
	    WHEN expr then compstmt
	    multiplewhen
        singleelse END								{printf("stmt: CASE expr WHEN expr then compstmt multiplewhen singleelse END \n");}
    | expr									    {printf("stmt: expr \n"); $$ = new ExpressionStmt($1);}
	;

singlearglist:		                        {printf("SINGLEARGLIST: \n");}
	| arglist	                            {printf("SINGLEARGLIST: arglist \n");}
	;

multipleelseif: ELSIF expr then compstmt multipleelseif   { printf("MULTIPLEELSIF: ELSIF expr THEN compstmt multipleelseif \n");
                                                $$ = new IfStmt($2,$4,$5); }
    | ELSE compstmt END                         { printf("MULTIPLEELSEIF: ELSE compstmt END \n");
                                                $$ = $2;}
    | END                                       { printf("multipleelseif: END \n");
                                                $$ = nullptr;}
	/* | multipleelsif  ELSIF expr then compstmt*/	/*{printf("MULTIPLEELSEIF: multipleelsif  ELSIF expr then compstmt \n");}*/
	;

singleelse:			                        {printf("singleelse: \n");
                                            $$ = new EmptyStmt();}
	| ELSE compstmt		                    {printf("singleelse: ELSE compstmt \n");
	                                        $$ = $2;}
	;

multiplewhen:						            {printf("multiplewhen: \n");}
	| multiplewhen WHEN expr then compstmt		{printf("multiplewhen: multiplewhen WHEN expr then compstmt	\n");}
	;


expr: identifier PLUSASSIGN expr		    {printf("expr: identifier PLUSASSIGN expr\n");
						                    $$ = new AssignExpr($1, EnumTokens::PLUSASSIGN, $3);}
	| identifier MINUSASSIGN expr		    {printf("expr: identifier MINUSASSIGN expr\n");
                                            $$ = new AssignExpr($1, EnumTokens::MINUSASSIGN, $3);}
	| identifier MULASSIGN expr		        {printf("expr: identifier MULASSIGN expr\n");
						                    $$ = new AssignExpr($1, EnumTokens::MULASSIGN, $3);}
	| identifier DIVASSIGN expr		        {printf("expr: identifier DIVASSIGN expr\n");
						                    $$ = new AssignExpr($1, EnumTokens::DIVASSIGN, $3);}
	| identifier ANDASSIGN expr		        {printf("expr: identifier ANDASSIGN expr\n");
						                    $$ = new AssignExpr($1, EnumTokens::ANDASSIGN, $3);}
	| identifier ORASSIGN expr		        {printf("expr: identifier ORASSIGN expr\n");
						                    $$ = new AssignExpr($1, EnumTokens::ORASSIGN, $3);}
    | identifier ASSIGN expr			    {printf("expr: identifier ASSIGN expr	\n");
                                            $$ = new AssignExpr($1, EnumTokens::ASSIGN, $3);}
	| expr PLUS expr			            {printf("expr: expr PLUS expr\n");
						                    $$ = new BinopExpr($1, EnumTokens::PLUS, $3);}
	| expr MINUS expr			            {printf("expr: expr MINUS expr\n");
						                    $$ = new BinopExpr($1, EnumTokens::MINUS, $3);}
	| expr MUL expr				            {printf("expr: expr MUL expr\n");
						                    $$ = new BinopExpr($1, EnumTokens::MUL, $3);}
	| expr DIV expr				            {printf("expr: expr DIV expr\n");
						                    $$ = new BinopExpr($1, EnumTokens::DIV, $3);}
	| expr GT expr				            {printf("expr: expr GT expr\n");
                                            $$ = new BinopComExpr($1, EnumTokens::GT, $3);}
	| expr GE expr				            {printf("expr: expr GE expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::GE, $3);}
	| expr LT expr				            {printf("expr: expr LT expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::LT, $3);}
	| expr LE expr				            {printf("expr: expr LE expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::LE, $3);}
	| expr EQ expr				            {printf("expr: expr EQ expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::EQ, $3);}
	| expr NE expr				            {printf("expr: expr NE expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::NE, $3);}
	| expr AND expr				            {printf("expr: expr AND expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::AND, $3);}
	| expr OR expr				            {printf("expr: expr OR expr\n");
						                    $$ = new BinopComExpr($1, EnumTokens::OR, $3);}
	| NOT expr				                {printf("expr: NOT expr\n");
	                                        $$ = new UnaryopExpr(EnumTokens::NOT, $2);}

	| literal				                {printf("expr: literal \n");
                                            $$ = new LiteralExpr($1);}
	| identifier				            {printf("expr: identifier \n");
						                    /*$$ = new IdPassthroughExpr($1)*/ $$ = $1;}
	| MINUS expr	%prec UMINUS		    {printf("expr: MINUS expr\n");
	                                        $$ = new UnaryopExpr(EnumTokens::MINUS, $2);}
	| identifier LPAREN singleexprs RPAREN	{printf("expr: identifier LPAREN singleexprs RPAREN\n");}
	| LPAREN expr RPAREN			        {printf("expr: LPAREN expr RPAREN \n");
                                            $$ = $2;}
	;

singleexprs:		                        {printf("singleexpr:  \n");}
	| exprs		                            {printf("singleexpr:  exprs \n");}
	;

exprs: expr multipleexpr                    {printf("exprs: expr multipleexpr \n");}
	;

multipleexpr :				                {printf("multipleexpr:  \n");}
	| multipleexpr COMMA expr	            {printf("multipleexpr: multipleexpr COMMA expr \n");}
	;

arglist : identifier multiplearglist	    {printf("arglist: identifier multipleexpr \n");}
	;

multiplearglist	:				            {printf("multiplearglist: \n");}
	| multiplearglist COMMA identifier	    {printf("multiplearglist: multiplearglist COMMA identifier \n");}
	;

then: t			                            {printf("then: t \n");}
	| THEN		                            {printf("then: THEN \n");}
	| t THEN	                            {printf("then: t THEN \n");}
	;

do : t			                            {printf("do: t \n");}
	| DO		                            {printf("t: do \n");}
	| t DO		                            {printf("t: t do \n");}
	;

t	: SEMICOLON	                            {printf("t: SEMICOLON \n");}
	| NEWLINE	                            {printf("t: NEWLINE \n");}
	;

identifier	: IDENTIFIER                    {printf("identifier: IDENTIFIER -  %s\n", $1);
				                            $$ = new IdExpr($1); }
		;

literal	: INTEGER		                    {printf("literal:INTEGER - %d\n", $1);
				                            $$ = new ValueExpr($1);}
		| BOOLEAN	                        {printf("literal: boolean-  %d\n", $1);
				                            $$ = new ValueExpr($1);}
		;

%%

